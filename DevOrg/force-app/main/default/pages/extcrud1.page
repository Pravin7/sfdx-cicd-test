<apex:page >
    <!-- A demo of an Ext DataProxy subclass for Force.com extending the Appirio Ext DataGrid demo -->
    <!-- (see http://techblog.appirio.com/2008/07/extending-visualforce-ui-ext-js.html) -->
    <!-- Instead of using Visualforce apex:repeat to populate a SimpleStore, data is loaded dynamically -->
    <!-- through the DataProxy, which itself uses the Salesforce AJAX Toolkit to perform requests -->
    <!-- Jeff Trull 2010-09-06 -->
     
        <!-- load AJAX Toolkit -->
        <script type="text/javascript">
        var __sfdcSessionId = '{!GETSESSIONID()}';
        </script>
        <script src="../../soap/ajax/19.0/connection.js" type="text/javascript"></script>
     
        <!-- load ExtJS -->

    <apex:includeScript value="{!URLFOR($Resource.ExtJs4, 'ext-all.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ExtJs4, 'ext-base.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.ExtJs4, '/resources/css/ext-all.css')}"/>

     
        <!-- Define proxy class -->
        <script type="text/javascript">
     
            // Inherit from DirectProxy, which is quite similar to what we want, except that *we* are supplying
            // the functions to be called for CRUD actions - they are not part of a Provider in the Ext sense
            Ext.ux.SFDCProxy = Ext.extend(Ext.data.DirectProxy, {
                               constructor: function(config) {
                                       config = config || {};
                                       // override user-supplied config, if any, with our API definition
                                       Ext.applyIf(config, { api: { read: Ext.apply(this.launchRead.createDelegate(this),
                                                                                    // make read method look like a Provider
                                                                                    { directCfg: { method: { len: 1 }}}),
                                                                    create: this.launchCreate.createDelegate(this),
                                                                    update: this.launchUpdate.createDelegate(this),
                                                                    destroy: this.launchDestroy.createDelegate(this)
                                                                     }});
                                       Ext.ux.SFDCProxy.superclass.constructor.call(this, config);
                               },
                               launchRead: function(params, callback, scope) {
                                // construct the query string.  We need to know the names of the selected fields.
                                // in normal proxies this information is held only by the reader.  Our custom store
                                // will supply these to us as a config parameter in the same format expected by readers
       
                                // get the names of the configured fields
                                var fieldlist = [];
                                for (var i = 0; i < this.fields.length; i++) {
                                    fieldlist.push(this.fields[i].name);
                                }
       
                                // assemble the query string
                                var querystr = 'SELECT ' + fieldlist.join(', ') + ' from ' + this.sobjname;
                                // Implement server-side sorting
                                if ("sort" in params) {
                                    querystr += ' ORDER BY ' + params["sort"];
                                    if ("dir" in params) {
                                        querystr += ' ' + params["dir"];
                                    }
                                }
                                // I could theoretically use LIMIT here to reduce the amount of data transferred in cases
                                // where paging is in force.  Unfortunately this produces misleading results b/c we can't know
                                // the "total".  So I'm stuck with transferring extra data - but at least (due to the query
                                // locater paging mechanism) not *all* of it
                           
                                // we have to create our own callback for the sforce request, for when it succeeds or fails, with
                                // the signature SF wants to see.  These callbacks must in turn call the Ext callback for
                                // data conversion (in the success case) or error reporting (fail)
                                // sforce signature is cb(queryResult, userarg) for success and cb(error, userarg) for failure
                                // Ext callback signature is cb(queryResult, statusobj), cb(error, statusobj) for failure
                                // So we will insert an extra status argument after the first one
                                   sforce.connection.query(querystr,
                                    // connect the ExtJS callbacks to the AJAX Toolkit callback system
                                    // use createDelegate because it permits inserting args at arbitrary points
                                    // but the scope fixing feature is not needed
                                    { onSuccess: callback.createDelegate(window, [{status: true}], 1),
                                      onFailure: callback.createDelegate(window, [{status: false}], 1)
                                    });                
                               },
                               launchCreate: function(jsonData, callback, scope) {
                                   // create and update are very similar, so consolidate
                                   this.launchCreateOrUpdate('create', jsonData, callback, scope);
                                  },
                               launchUpdate: function(jsonData, callback, scope) {
                                   this.launchCreateOrUpdate('update', jsonData, callback, scope);                              
                               },
                               launchCreateOrUpdate: function(action, jsonData, callback, scope) {
                                   var recs = jsonData.records;  // named this way due to the "root" config option
                                // if writer is not "listful" we will sometimes get a single object here instead of a size 1 array
                                var sobjs = new Array();
                                for (var recno = 0; recno < recs.length; recno++) {
                                    var sobj = new sforce.SObject(this.sobjname);
                                    for (var k in recs[recno]) {
                                        sobj[k] = recs[recno][k];
                                    }
                                    sobjs.push(sobj);
                                }
                                   sforce.connection[action](sobjs, { onSuccess: callback.createDelegate(window, [{status: true}], 1),
                                                                     onFailure: callback.createDelegate(window, [{status: false}], 1)
                                                                 });
                            },
                               launchDestroy: function(jsonData, callback, scope) {
                                   var recs = jsonData.records;
                                   sforce.connection.deleteIds(recs, { onSuccess: callback.createDelegate(window, [{status: true}], 1),
                                                                       onFailure: callback.createDelegate(window, [{status: false}], 1)
                                                                     });
                               },
                               onRead:  function(action, trans, result, res) {
                                   // Assemble result
                                var rT = trans.reader.recordType;
                                var records = [];
                                var it = new sforce.QueryResultIterator(result);
                                // only access results we absolutely have to, to avoid calling queryMore via the result iterator
                                var cur_rec = 0;
                                var recs_supplied = 0;
                                // if paging is in force, stop transferring data as soon as we have all that was requested
                                while (it.hasNext() && (!("limit" in trans.params) || (recs_supplied < trans.params["limit"]))) {
                                    var sobj = it.next();
                                    if (("start" in trans.params) && (cur_rec++ < trans.params["start"])) {
                                        // we have not come to the beginning of the requested data yet
                                        continue;
                                    }
                                    var r = {};
                                    var id;
                                    for (var k in sobj) {
                                        if (k == 'Id') {
                                            id = sobj[k];
                                        }
                                        r[k] = sobj[k];
                                    }
                                    records.push(new rT(r, id)); recs_supplied++;
                                }
                                // indicate load complete with event, and supply records via callback
                                   this.fireEvent("load", this, res, trans.request.arg);
                                trans.request.callback.call(trans.request.scope,
                                                            {records: records,
                                                             success: true,
                                                             totalRecords: result.size
                                                             },
                                                             trans.request.arg, true);                        
                               },
                               onWrite: function(action, trans, result, res, rs) {
                                // Report results the way Ext wants to see them:
                                // produce an array of objects that just have IDs
                                // note it's possible to do a lot more error checking
                                // (esp comparing data we thought we uploaded with what actually happened)
                                // plus we have success/failure on a per-record level from sforce.
                                var data = [];
                                for (var i = 0; i < result.length; i++) {
                                    data.push({id : result[i].id });
                                }
                                this.fireEvent("write", this, action, data, res, rs, trans.request.arg);
                                trans.request.callback.call(trans.request.scope, data, res, true);
                            }
                           });
     
            // finally, the store class itself
            // just sets things up right for the proxy (writer, pass sobj/fields to proxy)
            Ext.ux.SFDCStore = Ext.extend(Ext.data.DirectStore, {
                                          constructor: function(config) {
                                                  config = config || {};
                                                  var proxyCfg = Ext.copyTo({}, config, 'paramOrder,paramsAsHash,directFn,api,sobjname,fields');
                                                  Ext.applyIf(config, { proxy: new Ext.ux.SFDCProxy(proxyCfg),
                                                                        // "encode: false" keeps data in a nice format for our proxy onWrite
                                                                        writer: new Ext.data.JsonWriter({encode: false, listful: true}),
                                                                        root: 'records' });
                                                   Ext.ux.SFDCStore.superclass.constructor.call(this, config);
                                               }
                                           });
                                   
        </script>
           
        <!-- End SFDCStore component definition;  begin code for grid page -->
        <!-- Icons.  Using those included with ExtJS -->
        <style type="text/css">
            .icon-add
            {

            }
            .icon-save
            {

            }
            .icon-delete
            {

            }
        </style>
        <script type="text/javascript">
            // define the store
            var store = new Ext.ux.SFDCStore({    sobjname: 'Contact',
                                                fields: [{name:'ID'},{name:'FirstName'},{name:'LastName'}],
                                                // you can set these next ones however you like
                                                remoteSort: true, autoSave: false, batch: true});
           
            // Appirio demo grid augmented with support for on-demand loading, server-side sorting and paging,
            // cell editing and the addition of new rows
     
            // CREATE THE GRID
            var pagesize = 10;  // have to use this in two places: the paging toolbar, and the store's initial load
            var grid = new Ext.grid.EditorGridPanel({store: store, columns: [
                {id: 'ID', header: "ID", width: 50, sortable: true, dataIndex: 'Id'},
                {id: 'FirstName', header: "First Name", width: 150, sortable: true, dataIndex: 'FirstName',
                 editor: new Ext.form.TextField({ allowBlank: false}) },
                {id: 'LastNme', header: "Last Name", width: 150, sortable: true, dataIndex: 'LastName',
                 editor: new Ext.form.TextField({ allowBlank: false}) }
                ],stripeRows:true, autoExpandColumn: 'ID', height: 500, width: 1000, title: 'MY EXT JS CONTACT LIST',
                collapsible: true, collapsed: true,          // begin with data not shown
                listeners: { beforeexpand: function(panel, animate) {       // load data via query when grid expanded by user
                                                var store = panel.getStore();    // a reference to the original store we configured the panel with
                                                if (store.getTotalCount() == 0) {
                                                    store.load({ params: { start: 0, limit: pagesize }});
                                                }
                                                return true;
                                            }},
                bbar : new Ext.PagingToolbar({
                    pageSize: pagesize, store: store, displayInfo: true, displayMsg: 'Displaying contacts {0} - {1} of {2}',
                    emptyMsg: 'no contacts found'
                }),
                sm: new Ext.grid.RowSelectionModel(),
                tbar: { items: [
                                { text: 'Save Changes', iconCls:'icon-save',
                                  handler: function() {
                                      Ext.Msg.confirm('Save Changes?', 'Commit all changes, including deletions?',
                                                      function(b) {                                                    
                                                              if (b == 'yes') {
                                                                    grid.stopEditing();
                                                              store.save();
                                                              }
                                                          }
                                                    );
                                 }},
                                { text: 'New', iconCls: 'icon-add',
                                  handler: function() { grid.stopEditing();
                                                        store.insert(0, new store.recordType({Id: '', FirstName: '', LastName: ''}));
                                                        grid.startEditing(0, 1);
                                                      } },
                                { text: 'Delete Selected', iconCls:'icon-delete',
                                  handler: function(b, e) {   // button handlers get the button and the event passed in
                                        // collect list of things that will be deleted
                                        var mygrid = b.findParentByType('editorgrid');
                                        var selRecs = mygrid.getSelectionModel().getSelections();
                                        if (selRecs.length == 0) {
                                              console.log('no records selected');
                                              return;
                                        }
                                        var delIds = new Array();
                                        var delNames = new Array();
                                        for (var i = 0; i < selRecs.length; i++) {
                                              var nm = new String();
                                              if (selRecs[i].get('FirstName')) {
                                                    nm = selRecs[i].get('FirstName') + ' ';
                                              }
                                              if (selRecs[i].get('LastName')) {
                                                    nm += selRecs[i].get('LastName');
                                              }
                                              delNames.push(nm);
                                              delIds.push(selRecs[i].id);
                                        }
                                        var namestr = delNames.join(', ');
                                        Ext.Msg.confirm('Delete Entries?', 'Temporarily delete entries ' + delNames.join(', ') + '?',
                                                      function(b) {                                                    
                                                              if (b == 'yes') {
                                                                    grid.stopEditing();
                                                              store.remove(selRecs);
                                                              }
                                                          }
                                                    );
                                  }
                                }
                            ]},
                batchSave: true
            });
            Ext.onReady(function(){
                // create the expand event callback
                grid.render('myContactList-grid');
            });
     
        </script>
     
        <div id="myContactList-grid"></div>            
           
    </apex:page>